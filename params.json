{"name":"Git-cache","tagline":"Git extension to cache upstream repos on a local server","body":"git-cache\r\n=========\r\n\r\nGit extension to cache upstream repos on a local server\r\n\r\n<pre>\r\n       Figure 1: basic principle\r\n       -------------------------\r\n\r\n          +---------------+\r\n          |  workstation  |\r\n          +---v-------^---+\r\n              |       |\r\n              |       |fetch\r\n              |       |\r\n              |   +---^-------+\r\n          push|   | git-cache |\r\n              |   +---^-------+\r\n              |       |\r\n              |       |fetch\r\n              |       |\r\n          +---v-------^---+\r\n          |  git server   |\r\n          +---------------+\r\n</pre>\r\n\r\nAudience\r\n--------\r\n\r\nThese scripts are for teams working on some git repositories\r\nstaying on external sites. Using git-cache reduces significantly the external bandwith usage due to repeated fetchs.\r\n\r\nFrom the developer point of view, the cloned repository is usable transparently: pushes occur on the primary upstream server.\r\n\r\nContent\r\n-------\r\n\r\nThe solution comes with some scripts:\r\n* 'git-cclone', 'git-crecover' and 'git-cadd' to be installed on all clients\r\n* 'gitccache-server' to be installed on the cache server\r\n\r\nAnd 2 examples of configuration files.\r\n* 'gitcache.conf' for clients\r\n* 'gitcache-server.conf' for servers\r\n\r\nInstalling the client scripts\r\n-----------------------------\r\n\r\nAs user, put the scripts 'git-cclone', 'git-crecover' and\r\n'git-cadd' in your PATH.\r\n\r\nFor example:\r\n<pre>\r\n$ git clone https://github.com/kooltux/git-cache.git\r\n$ ln -s git-cache/git-cclone ~/bin/\r\n$ ln -s git-cache/git-crecover ~/bin\r\n$ ln -s git-cache/git-cadd ~/bin\r\n</pre>\r\n\r\nCreate the file (or copy git-cache/gitcache.conf) **~/.gitcache.conf** and edit it to put the \r\ndefinition of the variable **GIT_CACHE_SERVER** as in the example below:\r\n\r\n<pre>\r\nGIT_CACHE_SERVER=XXXX\r\n</pre>\r\n\r\nwhere *XXXX* stands for **git@proxy** or **me@my.company.com** .\r\n\r\nThis is how a client can connect to the cache using ssh. Feel free to use ssh-copy-id to install public keys on the cache server:\r\n\r\n<pre>\r\n$ . ~/.gitcache.conf\r\n$ ssh-copy-id $GIT_CACHE_SERVER\r\n</pre>\r\n\r\nRefer to installation of the cache server to get full understanding of what has\r\nto be set.\r\n\r\n**NOTE:** you can also define the variable **GIT_CACHE_SERVER** in your profile \r\nor rc files (.profile or .bashrc or .zshrc or ....)\r\n\r\nUsage on the client\r\n-------------------\r\n\r\nAfter installation, the client mainly have the command to clone git repositories\r\nthrough the cache. The standard clone is still available as usual.\r\n\r\n### git-cclone\r\n\r\nTo clone a directory use can use either the command 'git-cclone' or the command\r\n'git cclone'.\r\n\r\nUsage: **git cclone repository [directory [--mirror|--bare]]**\r\n\r\n**Please note**: Currently, most of the options of 'git clone' aren't available through 'cclone'.\r\n\r\nThe effect of the command is:\r\n- access the git cache server to ensure caching of the repository \r\n(it will produce a creation or a fetch on server side);\r\n- clone the cached git;\r\n- configure the cloned project to push on original git server and to fetch on cache.\r\n\r\nExample:\r\n<pre>\r\n$ git cclone git@github.com:kooltux/git-cache.git git-cache\r\n$ cd git-cache\r\n$ git remote -v\r\norigin\tgit@gitcache.localdomain:/srv/git/gitcache/github.com//kooltux/git-cache.git (fetch)\r\norigin\thttps://github.com/kooltux/git-cache (push)\r\n</pre>\r\n\r\nThe client can also use the command 'git-crecover' (that is also 'git crecover').\r\nThis command can either recover for a cache repository that was removed from the\r\ncache server or it can merely make a cache entry for an existing git clone (in other words, \r\nit inserts a fetching cache for a repository that was cloned in a standard way **without\r\ncache**).\r\n\r\n### git-cadd\r\n\r\nIt is sometimes interesting to add remote repositories to your current\r\nrepository with the command 'git remote add'. The command 'git-cadd'\r\nis the git-cache version of the command 'git remote add' but it inserts the\r\ncache for the added remote. It accepts exactly the same arguments that\r\n'git remote add'.\r\n\r\nUsage: **git cadd [options...] name repository**\r\n\r\n\r\n### git-crecover\r\n\r\n'git-crecover' is interactive unless called with options. \r\n\r\nUsage: **git crecover [name] [-r|--remove|-a|--auto]**\r\n\r\nThe optional argument 'name' identify the remote repository name and\r\nis 'origin' by default.\r\n\r\nGo to the directory of the cloned repository and call it\r\nwith 'git-crecover' or 'git crecover'. It will ask you what to do: REMOVE or RECOVER.\r\n\r\n**REMOVE:** remove any reference to any caching of git.\r\n\r\n**RECOVER:** insert the git cache references and ensure that the cached repository exists.\r\n\r\nInteresting side effect: 'git crecover' can also transform a non-cached clone \r\nin a cached clone when using the **RECOVER** command.\r\n\r\nWhen called with '-r' or '--remove', git-crecover removes any cache reference\r\nfor the optionnaly given remote without any prompting.\r\n\r\nWhen called with '-a' or '--auto', git-crecover insert the caching \r\nfor the optionnaly given remote without any prompting.\r\n\r\n\r\n\r\nInstallation of the cache server\r\n--------------------------------\r\n\r\nChoose the machine and the account that will be used to store cached repositories\r\nand run the server script.\r\n\r\nLog on the machine, clone the repo and copy 'gitcache-server' in a directory referenced by $PATH\r\n\r\n<pre>\r\n$ git clone https://github.com/kooltux/git-cache.git\r\n\r\n$ ln -s git-cache/gitcache-server ~/bin/\r\n\r\n$ cp git-cache/gitcache-server.conf ~/.gitcache-server.conf\r\n</pre>\r\n\r\nEdit the ~/.gitcache-server.conf file and ajust the variables:\r\n* GIT_CACHE_DIR : the cache directory where all git repos will be stored\r\n* GIT_CACHE_SERVER_PRIMARY : (optional) primary cache server for chaining\r\n* GIT_CACHE_LOG : (optional) a log file for gitcache-server activity\r\n\r\nUsing cache standalone (without server)\r\n---------------------------------------\r\n\r\nInto your account, you can put the client AND the server too. The server will still be \r\naccessed with ssh. Here below the examples of configuring your **.profile** or **.bashrc**:\r\n\r\n<pre>\r\nGIT_CACHE_SERVER=$(id -un)@localhost\r\nGIT_CACHE_DIR=~/.gitcachedir\r\n</pre>\r\n\r\nChaining caches\r\n---------------\r\n\r\nUsing the GIT_CACHE_SERVER_PRIMARY variable, it's possible to chain caches.\r\n\r\nTo use this, install git-cclone and git-crecover on the server too (add them to execution path).\r\n\r\nWhen gitcache-server is invoked to cache a new repo, it will try to fetch it from another cache and so on.\r\n\r\n*GIT_CACHE_SERVER_PRIMARY* has the same syntax as GIT_CACHE_SERVER and indicates the 'next' cache server to fetch from.\r\n\r\n<pre>\r\n   Figure 2: using a hierarchy of cache servers\r\n   --------------------------------------------\r\n   \r\n    ......................................\r\n    . high bit rate areas                .\r\n    .                                    ...  \r\n    .    +---------------+               . .  \r\n    .    | +---------------+             . ...\r\n    .    +-| +---------------+           . . .\r\n    .      +-|  workstations |           . . .\r\n    .        +---v-------^---+           . . .\r\n    .            |       |               . . .\r\n    .            |       |fetch          . . .\r\n    .            |       |               . . .\r\n    .            |   +---^-------+       . . .\r\n    .        push|   | git-cache |       . . .\r\n    .            |   +---^-------+       . . .\r\n    .            |       |               . . . \r\n    .............|.......|................ . .\r\n      .          |       |                 . .\r\n      ...........|.v.....|.^................ .\r\n        .        | |     | |                 .\r\n        .........|.|.v...|.|.^................\r\n                 | | |   | | |\r\n                 | | |   | | |\r\n                 | | | +-^-^-^-----+\r\n                 | | | | git-cache |\r\n           pushs | | | +-^---------+\r\n                 | | |   |\r\n                 | | |   | fetch\r\n                 | | |   |\r\n                 | | |   |   medium bitrate area\r\n    .............|.|.|...|.....................\r\n                 | | |   |   slow bitrate area\r\n                 | | |   |\r\n               +-v-v-v---^--+\r\n               | git server |\r\n               +------------+\r\n   \r\n</pre>\r\n\r\nSecurity\r\n--------\r\n\r\nAs for any client of SSH, you should be aware of the security holes of ssh.\r\nPlease refer to a good lesson about it.\r\n\r\nFAQ\r\n---\r\n\r\n*_Q:_* And for Windows?\r\n\r\n*_A:_* Hahahahahahahaha\r\n\r\n*_Q:_* But seriously...\r\n\r\n*_A:_* Well, fork and let us know the URL to put in place of the laughs.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}